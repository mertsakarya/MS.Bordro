<#@ template language="C#" HostSpecific="True" #>
<#@ Output Extension="js" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn" #>
<#
    MvcTextTemplateHost mvcHost = (MvcTextTemplateHost)(Host);
    var modelType = mvcHost.ModelType;
    var modelTypeName = mvcHost.ModelType.Name; 
    var modelTypeNamespace = mvcHost.ModelType.Namespace; 
    var modelTypeCamel = mvcHost.ExtendedProperties.ModelTypeCamel; 
    var primaryKeyName = mvcHost.PrimaryKeys[0].Name;
    var modelTypePluralized = mvcHost.ExtendedProperties.ModelTypePluralized; 
    var modelTypePluralizedCamel = mvcHost.ExtendedProperties.ModelTypePluralizedCamel; 
    var relatedEntities = mvcHost.ExtendedProperties.RelatedEntities;
#>
/// <reference path="_references.js" />

(function (window, undefined) {
    // Define the "MyApp" namespace
    var MyApp = window.MyApp = window.MyApp || {};

    // <#= modelTypeName #> class
    var entityType = "<#= modelTypeName #>:#<#= modelTypeNamespace #>";
    MyApp.<#= modelTypeName #> = function (data) {
        var self = this;

        // Underlying data
<# foreach (ModelProperty prop in GetModelProperties(modelType, false)) { #>
        self.<#= prop.Name #> = ko.observable(data.<#= prop.Name #>);
<# } #>
<# foreach (var relatedEntity in relatedEntities) { #>
        self.<#= relatedEntity.RelationName #> = ko.observable(upshot.map(data.<#= relatedEntity.RelationName #>, "<#= relatedEntity.TypeName #>:#<#= relatedEntity.TypeNamespace #>"));
<# } #>
        upshot.addEntityProperties(self, entityType);
    }

    // <#= modelTypePluralized #>ViewModel class
    MyApp.<#= modelTypePluralized #>ViewModel = function (options) {
        var self = this;

        // Private properties
        var dataSourceOptions = {
            providerParameters: { url: options.serviceUrl, operationName: "Get<#= modelTypePluralized #>" },
            entityType: entityType,
            bufferChanges: true,
            mapping: MyApp.<#= modelTypeName #>
        };
        var gridDataSource = new upshot.RemoteDataSource(dataSourceOptions);
        var editorDataSource = new upshot.RemoteDataSource(dataSourceOptions);
<# if (relatedEntities.Count > 0) { #>
        var parentEntitiesOperationParameters = {};
<# } #>
<# foreach (var relatedEntity in relatedEntities) { #>
        var <#= relatedEntity.RelationNamePluralizedCamel #>DataSource = new upshot.RemoteDataSource({
            providerParameters: { url: options.serviceUrl, operationName: "Get<#= relatedEntity.RelationName #>OptionsFor<#= modelTypeName #>", operationParameters: parentEntitiesOperationParameters },
            entityType: "<#= relatedEntity.TypeName #>:#<#= relatedEntity.TypeNamespace #>",
            dataContext: editorDataSource.getDataContext()
        });
<# } #>

        // Data
        self.<#= modelTypePluralizedCamel #> = gridDataSource.getEntities();
<# foreach (var relatedEntity in relatedEntities) { #>
        self.<#= relatedEntity.RelationNamePluralizedCamel #> = <#= relatedEntity.RelationNamePluralizedCamel #>DataSource.getEntitiesWithStatus({ capacity: 100 });
<# } #>
        self.editing<#= modelTypeName #> = editorDataSource.getFirstEntity();
        self.successMessage = ko.observable().extend({ notify: "always" });
        self.errorMessage = ko.observable().extend({ notify: "always" });
        self.paging = new upshot.PagingModel(gridDataSource, {
            onPageChange: function (pageIndex, pageSize) {
                self.nav.navigate({ page: pageIndex, pageSize: pageSize });
            }
        });
        self.validationConfig = $.extend({
            resetFormOnChange: self.editing<#= modelTypeName #>,
            submitHandler: function () { self.saveEdit() }
        }, editorDataSource.getEntityValidationRules());

        // Client-side navigation
        self.nav = new NavHistory({
            params: { edit: null, page: 1, pageSize: 10 },
            onNavigate: function (navEntry, navInfo) {
                self.paging.moveTo(navEntry.params.page, navEntry.params.pageSize);

                // Wipe out any old data so that it is not displayed in the UI while new data is being loaded 
                editorDataSource.revertChanges();
                editorDataSource.reset();
<# foreach (var relatedEntity in relatedEntities) { #>
                <#= relatedEntity.RelationNamePluralizedCamel #>DataSource.reset();
<# } #>

                if (navEntry.params.edit) {
<# if (relatedEntities.Count > 0) { #>
                    parentEntitiesOperationParameters.<#= primaryKeyName #> = Number(navEntry.params.edit) || null;
<# } #>
                    
<# foreach (var relatedEntity in relatedEntities) { #>
                    // Load the list of <#= relatedEntity.RelationNamePluralizedCamel #> allowed for this particular <#= modelTypeCamel #>
                    <#= relatedEntity.RelationNamePluralizedCamel #>DataSource.refresh();

<# } #>
                    if (navEntry.params.edit == "new") {
                        // Create and begin editing a new <#= modelTypeCamel #> instance
                        editorDataSource.getEntities().push(new MyApp.<#= modelTypeName #>({}));
                    } else {
                        // Load and begin editing an existing <#= modelTypeCamel #> instance
                        editorDataSource.setFilter({ property: "<#= primaryKeyName #>", value: Number(navEntry.params.edit) }).refresh();
                    }
                } else {
                    // Not editing, so load the requested page of data to display in the grid
                    gridDataSource.refresh();
                }
            }
        }).initialize({ linkToUrl: true });

        // Public operations
        self.saveEdit = function () {
            editorDataSource.commitChanges(function () {
                self.successMessage("Saved <#= modelTypeName #>").errorMessage("");
                self.showGrid();
            });
        }
        self.revertEdit = function () { editorDataSource.revertChanges() }
        self.edit<#= modelTypeName #> = function (<#= modelTypeCamel #>) { self.nav.navigate({ edit: <#= modelTypeCamel #>.<#= primaryKeyName #>() }) }
        self.showGrid = function () { self.nav.navigate({ edit: null }) }
        self.create<#= modelTypeName #> = function () { self.nav.navigate({ edit: "new" }) }
        self.delete<#= modelTypeName #> = function (<#= modelTypeCamel #>) {
            editorDataSource.deleteEntity(<#= modelTypeCamel #>);
            editorDataSource.commitChanges(function () {
                self.successMessage("Deleted <#= modelTypeName #>").errorMessage("");
                self.showGrid();
            });
        };

        // Error handling
        var handleServerError = function (httpStatus, message) {
            if (httpStatus === 200) {
                // Application domain error (e.g., validation error)
                self.errorMessage(message).successMessage("");
            } else {
                // System error (e.g., unhandled exception)
                self.errorMessage("Server error: HTTP status code: " + httpStatus + ", message: " + message).successMessage("");
            }
        }
        
        gridDataSource.bind({ refreshError: handleServerError, commitError: handleServerError });
        editorDataSource.bind({ refreshError: handleServerError, commitError: handleServerError });
    }
})(window);

<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string AssociationName { get; set; }
    public string ValueExpression { get; set; }
    public string ModelValueExpression { get; set; }
    public string ItemValueExpression { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
    public bool IsForeignKey { get; set; }
    public bool IsReadOnly { get; set; }
    public bool Scaffold { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(type, includeUnbindableProperties);
    
    foreach (ModelProperty prop in results) {
        if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
            prop.ModelValueExpression = "String.Format(\"{0:F}\", " + prop.ModelValueExpression + ")";
        }
        else if (prop.UnderlyingType == typeof(DateTime)) {
            prop.ModelValueExpression = "String.Format(\"{0:g}\", " + prop.ModelValueExpression + ")";
        }
    }

    return results;
}

// Call this to determine if property has scaffolding enabled
bool Scaffold(PropertyInfo property) {
    foreach (object attribute in property.GetCustomAttributes(true)) {
        var scaffoldColumn = attribute as ScaffoldColumnAttribute;
        if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {
            return false;
        }
    }
    return true;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type, true).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Call this to determine if the property represents a foreign key.
bool IsForeignKey(PropertyInfo property) {
    return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);
}

// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID
string GetValueExpressionSuffix(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName + "." + propertyModel.DisplayPropertyName : property.Name;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName : property.Name;
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && (includeUnbindableProperties || IsBindableType(underlyingType))) {
            string valueExpression = GetValueExpressionSuffix(prop);

            results.Add(new ModelProperty {
                Name = prop.Name,
                AssociationName = GetAssociationName(prop),
                ValueExpression = valueExpression,
                ModelValueExpression = "Model." + valueExpression,
                ItemValueExpression = "item." + valueExpression,
                UnderlyingType = underlyingType,
                IsPrimaryKey = IsPrimaryKey(prop),
                IsForeignKey = IsForeignKey(prop),
                IsReadOnly = prop.GetSetMethod() == null,
                Scaffold = Scaffold(prop)
            });
        }
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

MvcTextTemplateHost MvcTemplateHost {
    get {
        return (MvcTextTemplateHost)Host;
    }
}
#>

